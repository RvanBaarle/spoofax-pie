module compile/debug

imports

  signatures/tim-sig
  signatures/tim/-
  compile/util/ast
  compile/util/type

rules

  fix-invalid-ast : TProgram(ast) -> TProgram(TExpTypes(types, ast'))
  with
  {| StructTypeDefs :
    ast' := <bottomup(try(fix-invalid-elem))> ast
  ; types := <bagof-StructTypeDefs < make-set + ![]> ()
  |}

  fix-invalid-elem : TValueGlobal(x, t) -> TValueVar($[glb_[x]])
  
  fix-invalid-elem : TValueVar(x, t) -> TValueVar(x)
  fix-invalid-elem : TValueCast(TValueVar(x), t) -> TValueVar($[cast_[x]])
  fix-invalid-elem : TValueCast(x, t) -> x
  
  fix-invalid-elem : TExpLet([], b) -> b
  fix-invalid-elem : TExpFix([], b) -> b
  
  fix-invalid-elem : TBind(name, str) -> TBind($[glb_[name]], str)
  
  fix-invalid-elem : TFun(name, FUNCTION(types), args, body) -> TTypedFun($[glb_[name]], types', args, body)
  with
    types' := <map(type-to-ast)> types
  fix-invalid-elem : TFunOffset(name, i, FUNCTION(types), args, body) -> TTypedFun($[glb_[name]], types', args, body)
  with
    types' := <map(type-to-ast)> types
  
  fix-invalid-elem : TExpPrimOp(op, type, args, result, next) -> TExpTypedPrimOp(op, type', args, result, next)
  with
    type' := <type-to-ast> type
  
  type-to-ast : INT() -> TIntT()
  type-to-ast : STRING() -> TStringT()
  type-to-ast : FUNCTION(ts) -> TFunctionT(<map(type-to-ast)> ts)
  type-to-ast : REF(t) -> TRefT(<type-to-ast> t)
  type-to-ast : ARRAY(t) -> TArrayT(<type-to-ast> t)
  type-to-ast : RECORD(t) -> TRecordT(<type-to-ast> t)
  type-to-ast : ANONCLOSURE() -> TAnonClosureT()
  type-to-ast : CLOSURE(ts) -> TClosureT(<map(type-to-ast)> ts)
  type-to-ast : STRUCT(supers, members, Scope(_, name)) -> TNamedT(name)
  with
    supers' := <map(type-to-ast)> supers
  ; structmembers := <map(\(x, t) -> TStructMember(x, <type-to-ast> t)\)> members
  ; if <?[]> supers' then
      rules(StructTypeDefs :+ _ -> TTypeDef(name, TStructT(structmembers)))
    else
      [super] := supers'
    ; rules(StructTypeDefs :+ _ -> TTypeDef(name, TStructSuperT(super, structmembers)))
    end
  type-to-ast : STRUCT(supers, Scope(_, name)) -> TNamedT(name)
  type-to-ast : ANY() -> TAnyT()
  type-to-ast = debug(!"No matching type for: ") ; !TInferredT()
