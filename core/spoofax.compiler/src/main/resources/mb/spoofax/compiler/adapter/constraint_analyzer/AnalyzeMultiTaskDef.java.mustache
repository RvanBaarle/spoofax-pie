package {{baseAnalyzeMultiTaskDef.packageId}};

import mb.common.util.MapView;
import mb.constraint.common.ConstraintAnalyzer.MultiFileResult;
import mb.constraint.common.ConstraintAnalyzerContext;
import mb.constraint.pie.ConstraintAnalyzeMultiTaskDef;
import mb.pie.api.ExecContext;
import mb.pie.api.None;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.ResourceService;
import mb.resource.hierarchical.ResourcePath;
import mb.resource.hierarchical.match.ResourceMatcher;
import mb.resource.hierarchical.match.path.PathMatcher;
import mb.stratego.common.StrategoRuntime;
import org.spoofax.interpreter.terms.IStrategoTerm;

import javax.inject.Inject;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.stream.Stream;

@{{adapterProject.scope.qualifiedId}}
public class {{baseAnalyzeMultiTaskDef.id}} extends ConstraintAnalyzeMultiTaskDef {
    private final {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources;
    private final ResourceService resourceService;
    private final {{languageProjectInput.constraintAnalyzer.qualifiedId}} constraintAnalyzer;
    private final {{strategoRuntimeInput.getStrategoRuntimeProviderTaskDef.qualifiedId}} getStrategoRuntimeProvider;

    @Inject
    public {{baseAnalyzeMultiTaskDef.id}}(
        {{classLoaderResourcesInput.classLoaderResources.qualifiedId}} classLoaderResources,
        ResourceService resourceService,
        {{languageProjectInput.constraintAnalyzer.qualifiedId}} constraintAnalyzer,
        {{strategoRuntimeInput.getStrategoRuntimeProviderTaskDef.qualifiedId}} getStrategoRuntimeProvider
    ) {
        this.classLoaderResources = classLoaderResources;
        this.resourceService = resourceService;
        this.constraintAnalyzer = constraintAnalyzer;
        this.getStrategoRuntimeProvider = getStrategoRuntimeProvider;
    }

    @Override
    public String getId() {
        return "{{baseAnalyzeMultiTaskDef.qualifiedId}}";
    }

    @Override
    protected MultiFileResult analyze(ExecContext context, ResourcePath root, MapView<ResourceKey, IStrategoTerm> asts, ConstraintAnalyzerContext constraintAnalyzerContext) throws Exception {
        {{#languageProjectInput.enableStatix}}
        try {
            classLoaderResources.performWithDefinitionResourceLocationsTryAsNative(
                "src-gen/statix",
                directory -> directory.walkForEach(ResourceMatcher.ofFile().and(ResourceMatcher.ofPath(PathMatcher.ofExtension("aterm"))), file -> {
                    try {
                        if(context.require(file, ResourceStampers.hashFile())) {
                            // If a Statix spec file is new or has changed, clear the context. TODO: clear when spec file is removed.
                            constraintAnalyzerContext.clear();
                        }
                    } catch(IOException e) {
                        throw new UncheckedIOException(e);
                    }
                }),
                jarFileWithPath -> context.require(jarFileWithPath.file)
            );
        } catch(UncheckedIOException e) {
            throw e.getCause();
        }
        {{/languageProjectInput.enableStatix}}
        context.require(classLoaderResources.tryGetAsNativeResource(getClass()), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsNativeResource({{languageProjectInput.constraintAnalyzer.qualifiedId}}.class), ResourceStampers.hashFile());
        context.require(classLoaderResources.tryGetAsNativeResource({{languageProjectInput.constraintAnalyzerFactory.qualifiedId}}.class), ResourceStampers.hashFile());
        final StrategoRuntime strategoRuntime = context.require(getStrategoRuntimeProvider, None.instance).getValue().get();
        return constraintAnalyzer.analyze(root, asts, constraintAnalyzerContext, decorateStrategoRuntime(strategoRuntime, root), resourceService);
    }

    {{^languageProjectInput.enableStatix}}
    protected StrategoRuntime decorateStrategoRuntime(StrategoRuntime strategoRuntime, ResourcePath root) {
        return strategoRuntime;
    }
    {{/languageProjectInput.enableStatix}}
    {{#languageProjectInput.enableStatix}}
    protected StrategoRuntime decorateStrategoRuntime(StrategoRuntime strategoRuntime, ResourcePath root) {
        return strategoRuntime.addContextObject(mb.statix.spoofax.IStatixProjectConfig. class, createStatixProjectConfig())
                    .addContextObject(mb.spoofax2.common.primitive.generic.Spoofax2ProjectContext.class, createProjectContext(root));
    }

    protected mb.statix.spoofax.IStatixProjectConfig createStatixProjectConfig() {
        return new mb.statix.spoofax.StatixProjectConfig(
            // Spoofax 2 uses language name here. In Spoofax 3, we use the FQ artifact id, because that can be retrieved from the context object.
            // Currently, we do not differentiate by version, because that is optional (which slightly complicates creating identical strings.
            // This place should be kept in sync with `StatixCommonPrimitive`.
            java.util.Collections.singletonMap("{{qualifiedLanguageId}}", mb.statix.spoofax.SolverMode.{{statixSolverMode}}),
            {{#defaultStatixMessageStacktraceLength}}{{this}}{{/defaultStatixMessageStacktraceLength}}{{^defaultStatixMessageStacktraceLength}}null{{/defaultStatixMessageStacktraceLength}},
            {{#defaultStatixMessageTermDepth}}{{this}}{{/defaultStatixMessageTermDepth}}{{^defaultStatixMessageTermDepth}}null{{/defaultStatixMessageTermDepth}},
            {{#defaultStatixTestLogLevel}}"{{this}}"{{/defaultStatixTestLogLevel}}{{^defaultStatixTestLogLevel}}null{{/defaultStatixTestLogLevel}},
            {{#defaultStatixSuppressCascadingErrors}}{{this}}{{/defaultStatixSuppressCascadingErrors}}{{^defaultStatixSuppressCascadingErrors}}true{{/defaultStatixSuppressCascadingErrors}}
        );
    }

    protected mb.spoofax2.common.primitive.generic.Spoofax2ProjectContext createProjectContext(ResourcePath root) {
        return new mb.spoofax2.common.primitive.generic.Spoofax2ProjectContext(
            root,
            mb.common.util.MultiMapView.of(),
            mb.common.util.MultiMapView.of()
        );
    }

    {{/languageProjectInput.enableStatix}}
}
